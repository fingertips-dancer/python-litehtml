from __future__ import annotations
import typing
__all__ = ['background', 'background_attachment', 'background_attachment_fixed', 'background_attachment_scroll', 'background_layer', 'background_layer_color', 'background_layer_color_point', 'background_layer_image', 'background_repeat', 'background_repeat_no_repeat', 'background_repeat_repeat', 'background_repeat_repeat_x', 'background_repeat_repeat_y', 'border', 'border_radiuses', 'borders', 'css_border', 'css_border_radius', 'css_borders', 'css_length', 'css_margins', 'css_offsets', 'css_position', 'css_properties', 'css_size', 'css_text', 'debuglog', 'display_block', 'display_flex', 'display_inline', 'display_inline_block', 'display_inline_flex', 'display_inline_table', 'display_inline_text', 'display_list_item', 'display_none', 'display_table', 'display_table_caption', 'display_table_cell', 'display_table_column', 'display_table_column_group', 'display_table_footer_group', 'display_table_header_group', 'display_table_row', 'display_table_row_group', 'document', 'document_container', 'draw_block', 'draw_flag', 'draw_floats', 'draw_inlines', 'draw_positioned', 'draw_root', 'dumper', 'element', 'font_metrics', 'font_size', 'font_size_large', 'font_size_larger', 'font_size_medium', 'font_size_small', 'font_size_smaller', 'font_size_x_large', 'font_size_x_small', 'font_size_xx_large', 'font_size_xx_small', 'font_style', 'font_style_italic', 'font_style_normal', 'font_variant', 'font_variant_normal', 'font_variant_small_caps', 'font_weight', 'font_weight_bold', 'font_weight_bolder', 'font_weight_lighter', 'font_weight_normal', 'fromString', 'html_tag', 'layer_type', 'line_height', 'line_height_normal', 'list_marker', 'list_style_type', 'list_style_type_armenian', 'list_style_type_circle', 'list_style_type_cjk_ideographic', 'list_style_type_decimal', 'list_style_type_decimal_leading_zero', 'list_style_type_disc', 'list_style_type_georgian', 'list_style_type_hebrew', 'list_style_type_hiragana', 'list_style_type_hiragana_iroha', 'list_style_type_katakana', 'list_style_type_katakana_iroha', 'list_style_type_lower_alpha', 'list_style_type_lower_greek', 'list_style_type_lower_latin', 'list_style_type_lower_roman', 'list_style_type_none', 'list_style_type_square', 'list_style_type_upper_alpha', 'list_style_type_upper_latin', 'list_style_type_upper_roman', 'margins', 'mouse_event', 'position', 'render_all', 'render_fixed_only', 'render_item', 'render_no_fixed', 'render_type', 'size', 'style_display', 'text_transform', 'text_transform_capitalize', 'text_transform_lowercase', 'text_transform_none', 'text_transform_uppercase', 'web_color']
class background:
    m_baseurl: str
    m_color: ...
    m_image: list[...]
    m_position_x: list[...]
    m_position_y: list[...]
    m_size: list[...]
    def draw_layer(self, hdc: typing.SupportsInt, idx: typing.SupportsInt, layer: background_layer, container: ...) -> None:
        ...
    def get_color_layer(self, idx: typing.SupportsInt) -> background_layer_color:
        ...
    def get_conic_gradient_layer(self, idx: typing.SupportsInt, layer: background_layer) -> ...:
        ...
    def get_image_layer(self, idx: typing.SupportsInt) -> background_layer_image:
        ...
    def get_layer(self, idx: typing.SupportsInt, pos: ..., el: ..., ri: ..., layer: background_layer) -> bool:
        ...
    def get_layer_type(self, idx: typing.SupportsInt) -> layer_type:
        ...
    def get_layers_number(self) -> int:
        ...
    def get_linear_gradient_layer(self, idx: typing.SupportsInt, layer: background_layer) -> ...:
        ...
    def get_radial_gradient_layer(self, idx: typing.SupportsInt, layer: background_layer) -> ...:
        ...
    def is_empty(self) -> bool:
        ...
    @property
    def m_attachment(self) -> list[int]:
        ...
    @m_attachment.setter
    def m_attachment(self, arg0: list[typing.SupportsInt]) -> None:
        ...
    @property
    def m_clip(self) -> list[int]:
        ...
    @m_clip.setter
    def m_clip(self, arg0: list[typing.SupportsInt]) -> None:
        ...
    @property
    def m_origin(self) -> list[int]:
        ...
    @m_origin.setter
    def m_origin(self, arg0: list[typing.SupportsInt]) -> None:
        ...
    @property
    def m_repeat(self) -> list[int]:
        ...
    @m_repeat.setter
    def m_repeat(self, arg0: list[typing.SupportsInt]) -> None:
        ...
class background_attachment:
    """
    Members:
    
      background_attachment_scroll
    
      background_attachment_fixed
    """
    __members__: typing.ClassVar[dict[str, background_attachment]]  # value = {'background_attachment_scroll': <background_attachment.background_attachment_scroll: 0>, 'background_attachment_fixed': <background_attachment.background_attachment_fixed: 1>}
    background_attachment_fixed: typing.ClassVar[background_attachment]  # value = <background_attachment.background_attachment_fixed: 1>
    background_attachment_scroll: typing.ClassVar[background_attachment]  # value = <background_attachment.background_attachment_scroll: 0>
    def __and__(self, other: typing.Any) -> typing.Any:
        ...
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __ge__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __gt__(self, other: typing.Any) -> bool:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __invert__(self) -> typing.Any:
        ...
    def __le__(self, other: typing.Any) -> bool:
        ...
    def __lt__(self, other: typing.Any) -> bool:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __or__(self, other: typing.Any) -> typing.Any:
        ...
    def __rand__(self, other: typing.Any) -> typing.Any:
        ...
    def __repr__(self) -> str:
        ...
    def __ror__(self, other: typing.Any) -> typing.Any:
        ...
    def __rxor__(self, other: typing.Any) -> typing.Any:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    def __xor__(self, other: typing.Any) -> typing.Any:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class background_layer:
    attachment: ...
    border_box: ...
    border_radius: ...
    clip_box: ...
    is_root: bool
    origin_box: ...
    repeat: ...
    def __init__(self) -> None:
        ...
class background_layer_color:
    color: ...
class background_layer_color_point:
    color: ...
    @typing.overload
    def __init__(self) -> None:
        ...
    @typing.overload
    def __init__(self, offset: typing.SupportsFloat, color: ...) -> None:
        ...
    @property
    def hint(self) -> float | None:
        ...
    @hint.setter
    def hint(self, arg0: typing.SupportsFloat | None) -> None:
        ...
    @property
    def offset(self) -> float:
        ...
    @offset.setter
    def offset(self, arg0: typing.SupportsFloat) -> None:
        ...
class background_layer_image:
    base_url: str
    url: str
class background_repeat:
    """
    Members:
    
      background_repeat_repeat
    
      background_repeat_repeat_x
    
      background_repeat_repeat_y
    
      background_repeat_no_repeat
    """
    __members__: typing.ClassVar[dict[str, background_repeat]]  # value = {'background_repeat_repeat': <background_repeat.background_repeat_repeat: 0>, 'background_repeat_repeat_x': <background_repeat.background_repeat_repeat_x: 1>, 'background_repeat_repeat_y': <background_repeat.background_repeat_repeat_y: 2>, 'background_repeat_no_repeat': <background_repeat.background_repeat_no_repeat: 3>}
    background_repeat_no_repeat: typing.ClassVar[background_repeat]  # value = <background_repeat.background_repeat_no_repeat: 3>
    background_repeat_repeat: typing.ClassVar[background_repeat]  # value = <background_repeat.background_repeat_repeat: 0>
    background_repeat_repeat_x: typing.ClassVar[background_repeat]  # value = <background_repeat.background_repeat_repeat_x: 1>
    background_repeat_repeat_y: typing.ClassVar[background_repeat]  # value = <background_repeat.background_repeat_repeat_y: 2>
    def __and__(self, other: typing.Any) -> typing.Any:
        ...
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __ge__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __gt__(self, other: typing.Any) -> bool:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __invert__(self) -> typing.Any:
        ...
    def __le__(self, other: typing.Any) -> bool:
        ...
    def __lt__(self, other: typing.Any) -> bool:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __or__(self, other: typing.Any) -> typing.Any:
        ...
    def __rand__(self, other: typing.Any) -> typing.Any:
        ...
    def __repr__(self) -> str:
        ...
    def __ror__(self, other: typing.Any) -> typing.Any:
        ...
    def __rxor__(self, other: typing.Any) -> typing.Any:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    def __xor__(self, other: typing.Any) -> typing.Any:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class border:
    color: ...
    style: ...
    @typing.overload
    def __init__(self) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: border) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: css_border) -> None:
        ...
    @property
    def width(self) -> int:
        ...
    @width.setter
    def width(self, arg0: typing.SupportsInt) -> None:
        ...
class border_radiuses:
    @typing.overload
    def __init__(self) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: border_radiuses) -> None:
        ...
    @property
    def bottom_left_x(self) -> int:
        ...
    @bottom_left_x.setter
    def bottom_left_x(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def bottom_left_y(self) -> int:
        ...
    @bottom_left_y.setter
    def bottom_left_y(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def bottom_right_x(self) -> int:
        ...
    @bottom_right_x.setter
    def bottom_right_x(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def bottom_right_y(self) -> int:
        ...
    @bottom_right_y.setter
    def bottom_right_y(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def top_left_x(self) -> int:
        ...
    @top_left_x.setter
    def top_left_x(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def top_left_y(self) -> int:
        ...
    @top_left_y.setter
    def top_left_y(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def top_right_x(self) -> int:
        ...
    @top_right_x.setter
    def top_right_x(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def top_right_y(self) -> int:
        ...
    @top_right_y.setter
    def top_right_y(self, arg0: typing.SupportsInt) -> None:
        ...
class borders:
    bottom: border
    left: border
    radius: border_radiuses
    right: border
    top: border
    def __init__(self) -> None:
        ...
    def is_visible(self) -> bool:
        ...
class css_border:
    style: ...
    width: ...
    @typing.overload
    def __init__(self) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: css_border) -> None:
        ...
    def to_string(self) -> str:
        ...
class css_border_radius:
    bottom_left_x: ...
    bottom_left_y: ...
    bottom_right_x: ...
    bottom_right_y: ...
    top_left_x: ...
    top_left_y: ...
    top_right_x: ...
    top_right_y: ...
    @typing.overload
    def __init__(self) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: css_border_radius) -> None:
        ...
class css_borders:
    bottom: css_border
    left: css_border
    radius: css_border_radius
    right: css_border
    top: css_border
    def __init__(self) -> None:
        ...
    def is_visible(self) -> bool:
        ...
    def to_string(self) -> str:
        ...
class css_length:
    @typing.overload
    def __init__(self) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: typing.SupportsFloat, arg1: ...) -> None:
        ...
    def calc_percent(self, arg0: typing.SupportsInt) -> int:
        ...
    def is_predefined(self) -> bool:
        ...
    def predef_value(self: typing.SupportsInt) -> css_length:
        ...
    def set_value(self, arg0: typing.SupportsFloat, arg1: ...) -> None:
        ...
    def to_string(self) -> str:
        ...
    def units(self) -> ...:
        ...
    def val(self) -> float:
        ...
class css_margins:
    bottom: css_length
    left: css_length
    right: css_length
    top: css_length
    @typing.overload
    def __init__(self) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: css_margins) -> None:
        ...
    def to_string(self) -> str:
        ...
class css_offsets:
    bottom: css_length
    left: css_length
    right: css_length
    top: css_length
    @typing.overload
    def __init__(self) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: css_offsets) -> None:
        ...
    def to_string(self) -> str:
        ...
class css_position:
    height: css_length
    width: css_length
    x: css_length
    y: css_length
class css_properties:
    def __init__(self) -> None:
        ...
    def get_bg(self) -> background:
        ...
    def get_border_collapse(self) -> ...:
        ...
    def get_border_spacing_x(self) -> css_length:
        ...
    def get_border_spacing_y(self) -> css_length:
        ...
    def get_borders(self) -> css_borders:
        ...
    def get_box_sizing(self) -> ...:
        ...
    def get_caption_side(self) -> ...:
        ...
    def get_clear(self) -> ...:
        ...
    def get_color(self) -> ...:
        ...
    def get_content(self) -> str:
        ...
    def get_cursor(self) -> str:
        ...
    def get_display(self) -> ...:
        ...
    def get_flex_align_content(self) -> ...:
        ...
    def get_flex_align_items(self) -> ...:
        ...
    def get_flex_align_self(self) -> ...:
        ...
    def get_flex_basis(self) -> css_length:
        ...
    def get_flex_direction(self) -> ...:
        ...
    def get_flex_grow(self) -> float:
        ...
    def get_flex_justify_content(self) -> ...:
        ...
    def get_flex_shrink(self) -> float:
        ...
    def get_flex_wrap(self) -> ...:
        ...
    def get_float(self) -> ...:
        ...
    def get_font(self) -> int:
        ...
    def get_font_metrics(self) -> ...:
        ...
    def get_font_size(self) -> int:
        ...
    def get_height(self) -> css_length:
        ...
    def get_line_height(self) -> int:
        ...
    def get_list_style_image(self) -> str:
        ...
    def get_list_style_image_baseurl(self) -> str:
        ...
    def get_list_style_position(self) -> ...:
        ...
    def get_list_style_type(self) -> ...:
        ...
    def get_margins(self) -> css_margins:
        ...
    def get_max_height(self) -> css_length:
        ...
    def get_max_width(self) -> css_length:
        ...
    def get_min_height(self) -> css_length:
        ...
    def get_min_width(self) -> css_length:
        ...
    def get_offsets(self) -> css_offsets:
        ...
    def get_order(self) -> int:
        ...
    def get_overflow(self) -> ...:
        ...
    def get_padding(self) -> css_margins:
        ...
    def get_position(self) -> ...:
        ...
    def get_text_align(self) -> ...:
        ...
    def get_text_indent(self) -> css_length:
        ...
    def get_text_transform(self) -> ...:
        ...
    def get_vertical_align(self) -> ...:
        ...
    def get_visibility(self) -> ...:
        ...
    def get_white_space(self) -> ...:
        ...
    def get_width(self) -> css_length:
        ...
    def get_z_index(self) -> int:
        ...
    def set_bg(self, arg0: background) -> None:
        ...
    def set_border_collapse(self) -> ...:
        ...
    def set_border_spacing_x(self, arg0: css_length) -> None:
        ...
    def set_border_spacing_y(self, arg0: css_length) -> None:
        ...
    def set_borders(self, arg0: css_borders) -> None:
        ...
    def set_box_sizing(self, arg0: ...) -> None:
        ...
    def set_clear(self) -> ...:
        ...
    def set_color(self, arg0: ...) -> None:
        ...
    def set_content(self, arg0: str) -> None:
        ...
    def set_cursor(self, arg0: str) -> None:
        ...
    def set_display(self, arg0: ...) -> None:
        ...
    def set_float(self, arg0: ...) -> None:
        ...
    def set_font(self, arg0: typing.SupportsInt) -> None:
        ...
    def set_font_metrics(self, arg0: ...) -> None:
        ...
    def set_font_size(self, arg0: typing.SupportsInt) -> None:
        ...
    def set_height(self, arg0: css_length) -> None:
        ...
    def set_line_height(self, arg0: typing.SupportsInt) -> None:
        ...
    def set_list_style_image(self, arg0: str) -> None:
        ...
    def set_list_style_image_baseurl(self, arg0: str) -> None:
        ...
    def set_list_style_position(self, arg0: ...) -> None:
        ...
    def set_list_style_type(self, arg0: ...) -> None:
        ...
    def set_margins(self, arg0: css_margins) -> None:
        ...
    def set_max_height(self, arg0: css_length) -> None:
        ...
    def set_max_width(self, arg0: css_length) -> None:
        ...
    def set_min_height(self, arg0: css_length) -> None:
        ...
    def set_min_width(self, arg0: css_length) -> None:
        ...
    def set_offsets(self, arg0: css_offsets) -> None:
        ...
    def set_order(self, arg0: typing.SupportsInt) -> None:
        ...
    def set_overflow(self, arg0: ...) -> None:
        ...
    def set_padding(self, arg0: css_margins) -> None:
        ...
    def set_position(self, arg0: ...) -> None:
        ...
    def set_text_align(self, arg0: ...) -> None:
        ...
    def set_text_indent(self, arg0: css_length) -> None:
        ...
    def set_text_transform(self, arg0: ...) -> None:
        ...
    def set_vertical_align(self, arg0: ...) -> None:
        ...
    def set_visibility(self, arg0: ...) -> None:
        ...
    def set_white_space(self, arg0: ...) -> None:
        ...
    def set_width(self, arg0: css_length) -> None:
        ...
    def set_z_index(self, arg0: typing.SupportsInt) -> None:
        ...
class css_size:
    height: css_length
    width: css_length
    def __init__(self, arg0: css_length, arg1: css_length) -> None:
        ...
class css_text:
    baseurl: str
    media: str
    text: str
    @typing.overload
    def __init__(self) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: css_text) -> None:
        ...
class document:
    def content_height(self) -> int:
        ...
    def content_width(self) -> int:
        ...
    def draw(self, arg0: typing.SupportsInt, arg1: typing.SupportsInt, arg2: typing.SupportsInt, arg3: ...) -> None:
        ...
    def dump(self, arg0: dumper) -> None:
        ...
    def height(self) -> int:
        ...
    def on_lbutton_down(self, arg0: typing.SupportsInt, arg1: typing.SupportsInt, arg2: typing.SupportsInt, arg3: typing.SupportsInt, arg4: list[...]) -> bool:
        ...
    def on_lbutton_up(self, arg0: typing.SupportsInt, arg1: typing.SupportsInt, arg2: typing.SupportsInt, arg3: typing.SupportsInt, arg4: list[...]) -> bool:
        ...
    def on_mouse_leave(self, arg0: list[...]) -> bool:
        ...
    def on_mouse_over(self, arg0: typing.SupportsInt, arg1: typing.SupportsInt, arg2: typing.SupportsInt, arg3: typing.SupportsInt, arg4: list[...]) -> bool:
        ...
    def render(self, arg0: typing.SupportsInt, arg1: ...) -> int:
        ...
    def width(self) -> int:
        ...
class document_container:
    def __init__(self) -> None:
        ...
class draw_flag:
    """
    Members:
    
      draw_root
    
      draw_block
    
      draw_floats
    
      draw_inlines
    
      draw_positioned
    """
    __members__: typing.ClassVar[dict[str, draw_flag]]  # value = {'draw_root': <draw_flag.draw_root: 0>, 'draw_block': <draw_flag.draw_block: 1>, 'draw_floats': <draw_flag.draw_floats: 2>, 'draw_inlines': <draw_flag.draw_inlines: 3>, 'draw_positioned': <draw_flag.draw_positioned: 4>}
    draw_block: typing.ClassVar[draw_flag]  # value = <draw_flag.draw_block: 1>
    draw_floats: typing.ClassVar[draw_flag]  # value = <draw_flag.draw_floats: 2>
    draw_inlines: typing.ClassVar[draw_flag]  # value = <draw_flag.draw_inlines: 3>
    draw_positioned: typing.ClassVar[draw_flag]  # value = <draw_flag.draw_positioned: 4>
    draw_root: typing.ClassVar[draw_flag]  # value = <draw_flag.draw_root: 0>
    def __and__(self, other: typing.Any) -> typing.Any:
        ...
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __ge__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __gt__(self, other: typing.Any) -> bool:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __invert__(self) -> typing.Any:
        ...
    def __le__(self, other: typing.Any) -> bool:
        ...
    def __lt__(self, other: typing.Any) -> bool:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __or__(self, other: typing.Any) -> typing.Any:
        ...
    def __rand__(self, other: typing.Any) -> typing.Any:
        ...
    def __repr__(self) -> str:
        ...
    def __ror__(self, other: typing.Any) -> typing.Any:
        ...
    def __rxor__(self, other: typing.Any) -> typing.Any:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    def __xor__(self, other: typing.Any) -> typing.Any:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class dumper:
    def __init__(self) -> None:
        ...
class element:
    def __init__(self, arg0: document) -> None:
        ...
    def css(self) -> css_properties:
        ...
    def get_placement(self) -> ...:
        ...
    def get_tagName(self) -> str:
        ...
    def id(self) -> ...:
        ...
    def in_normal_flow(self) -> bool:
        ...
    def is_block_box(self) -> bool:
        ...
    def is_block_formatting_context(self) -> bool:
        ...
    def is_body(self) -> bool:
        ...
    def is_break(self) -> bool:
        ...
    def is_comment(self) -> bool:
        ...
    def is_float(self) -> bool:
        ...
    def is_inline(self) -> bool:
        ...
    def is_inline_box(self) -> bool:
        ...
    def is_positioned(self) -> bool:
        ...
    def is_replaced(self) -> bool:
        ...
    def is_root(self) -> bool:
        ...
    def is_space(self) -> bool:
        ...
    def is_table_skip(self) -> bool:
        ...
    def is_text(self) -> bool:
        ...
    def is_white_space(self) -> bool:
        ...
    def on_click(self) -> None:
        ...
    def on_lbutton_down(self) -> bool:
        ...
    def on_lbutton_up(self) -> bool:
        ...
    def on_mouse_leave(self) -> bool:
        ...
    def on_mouse_over(self) -> bool:
        ...
    def refresh_styles(self) -> None:
        ...
    def tag(self) -> ...:
        ...
class font_metrics:
    draw_spaces: bool
    def __init__(self) -> None:
        ...
    def base_line(self) -> int:
        ...
    @property
    def ascent(self) -> int:
        ...
    @ascent.setter
    def ascent(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def descent(self) -> int:
        ...
    @descent.setter
    def descent(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def height(self) -> int:
        ...
    @height.setter
    def height(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def x_height(self) -> int:
        ...
    @x_height.setter
    def x_height(self, arg0: typing.SupportsInt) -> None:
        ...
class font_size:
    """
    Members:
    
      font_size_xx_small
    
      font_size_x_small
    
      font_size_small
    
      font_size_medium
    
      font_size_large
    
      font_size_x_large
    
      font_size_xx_large
    
      font_size_smaller
    
      font_size_larger
    """
    __members__: typing.ClassVar[dict[str, font_size]]  # value = {'font_size_xx_small': <font_size.font_size_xx_small: 0>, 'font_size_x_small': <font_size.font_size_x_small: 1>, 'font_size_small': <font_size.font_size_small: 2>, 'font_size_medium': <font_size.font_size_medium: 3>, 'font_size_large': <font_size.font_size_large: 4>, 'font_size_x_large': <font_size.font_size_x_large: 5>, 'font_size_xx_large': <font_size.font_size_xx_large: 6>, 'font_size_smaller': <font_size.font_size_smaller: 7>, 'font_size_larger': <font_size.font_size_larger: 8>}
    font_size_large: typing.ClassVar[font_size]  # value = <font_size.font_size_large: 4>
    font_size_larger: typing.ClassVar[font_size]  # value = <font_size.font_size_larger: 8>
    font_size_medium: typing.ClassVar[font_size]  # value = <font_size.font_size_medium: 3>
    font_size_small: typing.ClassVar[font_size]  # value = <font_size.font_size_small: 2>
    font_size_smaller: typing.ClassVar[font_size]  # value = <font_size.font_size_smaller: 7>
    font_size_x_large: typing.ClassVar[font_size]  # value = <font_size.font_size_x_large: 5>
    font_size_x_small: typing.ClassVar[font_size]  # value = <font_size.font_size_x_small: 1>
    font_size_xx_large: typing.ClassVar[font_size]  # value = <font_size.font_size_xx_large: 6>
    font_size_xx_small: typing.ClassVar[font_size]  # value = <font_size.font_size_xx_small: 0>
    def __and__(self, other: typing.Any) -> typing.Any:
        ...
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __ge__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __gt__(self, other: typing.Any) -> bool:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __invert__(self) -> typing.Any:
        ...
    def __le__(self, other: typing.Any) -> bool:
        ...
    def __lt__(self, other: typing.Any) -> bool:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __or__(self, other: typing.Any) -> typing.Any:
        ...
    def __rand__(self, other: typing.Any) -> typing.Any:
        ...
    def __repr__(self) -> str:
        ...
    def __ror__(self, other: typing.Any) -> typing.Any:
        ...
    def __rxor__(self, other: typing.Any) -> typing.Any:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    def __xor__(self, other: typing.Any) -> typing.Any:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class font_style:
    """
    Members:
    
      font_style_normal
    
      font_style_italic
    """
    __members__: typing.ClassVar[dict[str, font_style]]  # value = {'font_style_normal': <font_style.font_style_normal: 0>, 'font_style_italic': <font_style.font_style_italic: 1>}
    font_style_italic: typing.ClassVar[font_style]  # value = <font_style.font_style_italic: 1>
    font_style_normal: typing.ClassVar[font_style]  # value = <font_style.font_style_normal: 0>
    def __and__(self, other: typing.Any) -> typing.Any:
        ...
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __ge__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __gt__(self, other: typing.Any) -> bool:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __invert__(self) -> typing.Any:
        ...
    def __le__(self, other: typing.Any) -> bool:
        ...
    def __lt__(self, other: typing.Any) -> bool:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __or__(self, other: typing.Any) -> typing.Any:
        ...
    def __rand__(self, other: typing.Any) -> typing.Any:
        ...
    def __repr__(self) -> str:
        ...
    def __ror__(self, other: typing.Any) -> typing.Any:
        ...
    def __rxor__(self, other: typing.Any) -> typing.Any:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    def __xor__(self, other: typing.Any) -> typing.Any:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class font_variant:
    """
    Members:
    
      font_variant_normal
    
      font_variant_small_caps
    """
    __members__: typing.ClassVar[dict[str, font_variant]]  # value = {'font_variant_normal': <font_variant.font_variant_normal: 0>, 'font_variant_small_caps': <font_variant.font_variant_small_caps: 1>}
    font_variant_normal: typing.ClassVar[font_variant]  # value = <font_variant.font_variant_normal: 0>
    font_variant_small_caps: typing.ClassVar[font_variant]  # value = <font_variant.font_variant_small_caps: 1>
    def __and__(self, other: typing.Any) -> typing.Any:
        ...
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __ge__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __gt__(self, other: typing.Any) -> bool:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __invert__(self) -> typing.Any:
        ...
    def __le__(self, other: typing.Any) -> bool:
        ...
    def __lt__(self, other: typing.Any) -> bool:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __or__(self, other: typing.Any) -> typing.Any:
        ...
    def __rand__(self, other: typing.Any) -> typing.Any:
        ...
    def __repr__(self) -> str:
        ...
    def __ror__(self, other: typing.Any) -> typing.Any:
        ...
    def __rxor__(self, other: typing.Any) -> typing.Any:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    def __xor__(self, other: typing.Any) -> typing.Any:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class font_weight:
    """
    Members:
    
      font_weight_normal
    
      font_weight_bold
    
      font_weight_bolder
    
      font_weight_lighter
    """
    __members__: typing.ClassVar[dict[str, font_weight]]  # value = {'font_weight_normal': <font_weight.font_weight_normal: 0>, 'font_weight_bold': <font_weight.font_weight_bold: 1>, 'font_weight_bolder': <font_weight.font_weight_bolder: 2>, 'font_weight_lighter': <font_weight.font_weight_lighter: 3>}
    font_weight_bold: typing.ClassVar[font_weight]  # value = <font_weight.font_weight_bold: 1>
    font_weight_bolder: typing.ClassVar[font_weight]  # value = <font_weight.font_weight_bolder: 2>
    font_weight_lighter: typing.ClassVar[font_weight]  # value = <font_weight.font_weight_lighter: 3>
    font_weight_normal: typing.ClassVar[font_weight]  # value = <font_weight.font_weight_normal: 0>
    def __and__(self, other: typing.Any) -> typing.Any:
        ...
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __ge__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __gt__(self, other: typing.Any) -> bool:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __invert__(self) -> typing.Any:
        ...
    def __le__(self, other: typing.Any) -> bool:
        ...
    def __lt__(self, other: typing.Any) -> bool:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __or__(self, other: typing.Any) -> typing.Any:
        ...
    def __rand__(self, other: typing.Any) -> typing.Any:
        ...
    def __repr__(self) -> str:
        ...
    def __ror__(self, other: typing.Any) -> typing.Any:
        ...
    def __rxor__(self, other: typing.Any) -> typing.Any:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    def __xor__(self, other: typing.Any) -> typing.Any:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class html_tag(element):
    def __init__(self, arg0: document) -> None:
        ...
    def draw(self, arg0: typing.SupportsInt, arg1: typing.SupportsInt, arg2: typing.SupportsInt, arg3: ..., arg4: ...) -> None:
        ...
    def draw_background(self, arg0: typing.SupportsInt, arg1: typing.SupportsInt, arg2: typing.SupportsInt, arg3: ..., arg4: ...) -> None:
        ...
    def get_placement(self) -> ...:
        ...
    def get_tagName(self) -> str:
        ...
class layer_type:
    """
    Members:
    
      type_none
    
      type_color
    
      type_image
    
      type_linear_gradient
    
      type_radial_gradient
    
      type_conic_gradient
    """
    __members__: typing.ClassVar[dict[str, layer_type]]  # value = {'type_none': <layer_type.type_none: 0>, 'type_color': <layer_type.type_color: 1>, 'type_image': <layer_type.type_image: 2>, 'type_linear_gradient': <layer_type.type_linear_gradient: 3>, 'type_radial_gradient': <layer_type.type_radial_gradient: 4>, 'type_conic_gradient': <layer_type.type_conic_gradient: 5>}
    type_color: typing.ClassVar[layer_type]  # value = <layer_type.type_color: 1>
    type_conic_gradient: typing.ClassVar[layer_type]  # value = <layer_type.type_conic_gradient: 5>
    type_image: typing.ClassVar[layer_type]  # value = <layer_type.type_image: 2>
    type_linear_gradient: typing.ClassVar[layer_type]  # value = <layer_type.type_linear_gradient: 3>
    type_none: typing.ClassVar[layer_type]  # value = <layer_type.type_none: 0>
    type_radial_gradient: typing.ClassVar[layer_type]  # value = <layer_type.type_radial_gradient: 4>
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __repr__(self) -> str:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class line_height:
    """
    Members:
    
      line_height_normal
    """
    __members__: typing.ClassVar[dict[str, line_height]]  # value = {'line_height_normal': <line_height.line_height_normal: 0>}
    line_height_normal: typing.ClassVar[line_height]  # value = <line_height.line_height_normal: 0>
    def __and__(self, other: typing.Any) -> typing.Any:
        ...
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __ge__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __gt__(self, other: typing.Any) -> bool:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __invert__(self) -> typing.Any:
        ...
    def __le__(self, other: typing.Any) -> bool:
        ...
    def __lt__(self, other: typing.Any) -> bool:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __or__(self, other: typing.Any) -> typing.Any:
        ...
    def __rand__(self, other: typing.Any) -> typing.Any:
        ...
    def __repr__(self) -> str:
        ...
    def __ror__(self, other: typing.Any) -> typing.Any:
        ...
    def __rxor__(self, other: typing.Any) -> typing.Any:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    def __xor__(self, other: typing.Any) -> typing.Any:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class list_marker:
    @property
    def baseurl(self) -> str:
        ...
    @property
    def color(self) -> ...:
        ...
    @property
    def font(self) -> int:
        ...
    @property
    def image(self) -> str:
        ...
    @property
    def index(self) -> int:
        ...
    @property
    def marker_type(self) -> ...:
        ...
    @property
    def pos(self) -> ...:
        ...
class list_style_type:
    """
    Members:
    
      list_style_type_none
    
      list_style_type_circle
    
      list_style_type_disc
    
      list_style_type_square
    
      list_style_type_armenian
    
      list_style_type_cjk_ideographic
    
      list_style_type_decimal
    
      list_style_type_decimal_leading_zero
    
      list_style_type_georgian
    
      list_style_type_hebrew
    
      list_style_type_hiragana
    
      list_style_type_hiragana_iroha
    
      list_style_type_katakana
    
      list_style_type_katakana_iroha
    
      list_style_type_lower_alpha
    
      list_style_type_lower_greek
    
      list_style_type_lower_latin
    
      list_style_type_lower_roman
    
      list_style_type_upper_alpha
    
      list_style_type_upper_latin
    
      list_style_type_upper_roman
    """
    __members__: typing.ClassVar[dict[str, list_style_type]]  # value = {'list_style_type_none': <list_style_type.list_style_type_none: 0>, 'list_style_type_circle': <list_style_type.list_style_type_circle: 1>, 'list_style_type_disc': <list_style_type.list_style_type_disc: 2>, 'list_style_type_square': <list_style_type.list_style_type_square: 3>, 'list_style_type_armenian': <list_style_type.list_style_type_armenian: 4>, 'list_style_type_cjk_ideographic': <list_style_type.list_style_type_cjk_ideographic: 5>, 'list_style_type_decimal': <list_style_type.list_style_type_decimal: 6>, 'list_style_type_decimal_leading_zero': <list_style_type.list_style_type_decimal_leading_zero: 7>, 'list_style_type_georgian': <list_style_type.list_style_type_georgian: 8>, 'list_style_type_hebrew': <list_style_type.list_style_type_hebrew: 9>, 'list_style_type_hiragana': <list_style_type.list_style_type_hiragana: 10>, 'list_style_type_hiragana_iroha': <list_style_type.list_style_type_hiragana_iroha: 11>, 'list_style_type_katakana': <list_style_type.list_style_type_katakana: 12>, 'list_style_type_katakana_iroha': <list_style_type.list_style_type_katakana_iroha: 13>, 'list_style_type_lower_alpha': <list_style_type.list_style_type_lower_alpha: 14>, 'list_style_type_lower_greek': <list_style_type.list_style_type_lower_greek: 15>, 'list_style_type_lower_latin': <list_style_type.list_style_type_lower_latin: 16>, 'list_style_type_lower_roman': <list_style_type.list_style_type_lower_roman: 17>, 'list_style_type_upper_alpha': <list_style_type.list_style_type_upper_alpha: 18>, 'list_style_type_upper_latin': <list_style_type.list_style_type_upper_latin: 19>, 'list_style_type_upper_roman': <list_style_type.list_style_type_upper_roman: 20>}
    list_style_type_armenian: typing.ClassVar[list_style_type]  # value = <list_style_type.list_style_type_armenian: 4>
    list_style_type_circle: typing.ClassVar[list_style_type]  # value = <list_style_type.list_style_type_circle: 1>
    list_style_type_cjk_ideographic: typing.ClassVar[list_style_type]  # value = <list_style_type.list_style_type_cjk_ideographic: 5>
    list_style_type_decimal: typing.ClassVar[list_style_type]  # value = <list_style_type.list_style_type_decimal: 6>
    list_style_type_decimal_leading_zero: typing.ClassVar[list_style_type]  # value = <list_style_type.list_style_type_decimal_leading_zero: 7>
    list_style_type_disc: typing.ClassVar[list_style_type]  # value = <list_style_type.list_style_type_disc: 2>
    list_style_type_georgian: typing.ClassVar[list_style_type]  # value = <list_style_type.list_style_type_georgian: 8>
    list_style_type_hebrew: typing.ClassVar[list_style_type]  # value = <list_style_type.list_style_type_hebrew: 9>
    list_style_type_hiragana: typing.ClassVar[list_style_type]  # value = <list_style_type.list_style_type_hiragana: 10>
    list_style_type_hiragana_iroha: typing.ClassVar[list_style_type]  # value = <list_style_type.list_style_type_hiragana_iroha: 11>
    list_style_type_katakana: typing.ClassVar[list_style_type]  # value = <list_style_type.list_style_type_katakana: 12>
    list_style_type_katakana_iroha: typing.ClassVar[list_style_type]  # value = <list_style_type.list_style_type_katakana_iroha: 13>
    list_style_type_lower_alpha: typing.ClassVar[list_style_type]  # value = <list_style_type.list_style_type_lower_alpha: 14>
    list_style_type_lower_greek: typing.ClassVar[list_style_type]  # value = <list_style_type.list_style_type_lower_greek: 15>
    list_style_type_lower_latin: typing.ClassVar[list_style_type]  # value = <list_style_type.list_style_type_lower_latin: 16>
    list_style_type_lower_roman: typing.ClassVar[list_style_type]  # value = <list_style_type.list_style_type_lower_roman: 17>
    list_style_type_none: typing.ClassVar[list_style_type]  # value = <list_style_type.list_style_type_none: 0>
    list_style_type_square: typing.ClassVar[list_style_type]  # value = <list_style_type.list_style_type_square: 3>
    list_style_type_upper_alpha: typing.ClassVar[list_style_type]  # value = <list_style_type.list_style_type_upper_alpha: 18>
    list_style_type_upper_latin: typing.ClassVar[list_style_type]  # value = <list_style_type.list_style_type_upper_latin: 19>
    list_style_type_upper_roman: typing.ClassVar[list_style_type]  # value = <list_style_type.list_style_type_upper_roman: 20>
    def __and__(self, other: typing.Any) -> typing.Any:
        ...
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __ge__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __gt__(self, other: typing.Any) -> bool:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __invert__(self) -> typing.Any:
        ...
    def __le__(self, other: typing.Any) -> bool:
        ...
    def __lt__(self, other: typing.Any) -> bool:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __or__(self, other: typing.Any) -> typing.Any:
        ...
    def __rand__(self, other: typing.Any) -> typing.Any:
        ...
    def __repr__(self) -> str:
        ...
    def __ror__(self, other: typing.Any) -> typing.Any:
        ...
    def __rxor__(self, other: typing.Any) -> typing.Any:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    def __xor__(self, other: typing.Any) -> typing.Any:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class margins:
    def __init__(self) -> None:
        ...
    def height(self) -> int:
        ...
    def width(self) -> int:
        ...
    @property
    def bottom(self) -> int:
        ...
    @bottom.setter
    def bottom(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def left(self) -> int:
        ...
    @left.setter
    def left(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def right(self) -> int:
        ...
    @right.setter
    def right(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def top(self) -> int:
        ...
    @top.setter
    def top(self, arg0: typing.SupportsInt) -> None:
        ...
class mouse_event:
    """
    Members:
    
      mouse_event_enter
    
      mouse_event_leave
    """
    __members__: typing.ClassVar[dict[str, mouse_event]]  # value = {'mouse_event_enter': <mouse_event.mouse_event_enter: 0>, 'mouse_event_leave': <mouse_event.mouse_event_leave: 1>}
    mouse_event_enter: typing.ClassVar[mouse_event]  # value = <mouse_event.mouse_event_enter: 0>
    mouse_event_leave: typing.ClassVar[mouse_event]  # value = <mouse_event.mouse_event_leave: 1>
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __repr__(self) -> str:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class position:
    @typing.overload
    def __init__(self) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: typing.SupportsInt, arg1: typing.SupportsInt, arg2: typing.SupportsInt, arg3: typing.SupportsInt) -> None:
        ...
    def bottom(self) -> int:
        ...
    def clear(self) -> None:
        ...
    def does_intersect(self, arg0: position) -> bool:
        ...
    def empty(self) -> bool:
        ...
    def is_point_inside(self, arg0: typing.SupportsInt, arg1: typing.SupportsInt) -> bool:
        ...
    def left(self) -> int:
        ...
    def move_to(self, arg0: typing.SupportsInt, arg1: typing.SupportsInt) -> None:
        ...
    def right(self) -> int:
        ...
    def top(self) -> int:
        ...
    @property
    def height(self) -> int:
        ...
    @height.setter
    def height(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def width(self) -> int:
        ...
    @width.setter
    def width(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def x(self) -> int:
        ...
    @x.setter
    def x(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def y(self) -> int:
        ...
    @y.setter
    def y(self, arg0: typing.SupportsInt) -> None:
        ...
class render_item:
    def border_bottom(self) -> int:
        ...
    def border_left(self) -> int:
        ...
    def border_right(self) -> int:
        ...
    def border_top(self) -> int:
        ...
    def bottom(self) -> int:
        ...
    def height(self) -> int:
        ...
    def left(self) -> int:
        ...
    def margin_bottom(self) -> int:
        ...
    def margin_left(self) -> int:
        ...
    def margin_right(self) -> int:
        ...
    def margin_top(self) -> int:
        ...
    def padding_bottom(self) -> int:
        ...
    def padding_left(self) -> int:
        ...
    def padding_right(self) -> int:
        ...
    def padding_top(self) -> int:
        ...
    def pos(self) -> ...:
        ...
    def right(self) -> int:
        ...
    def top(self) -> int:
        ...
    def width(self) -> int:
        ...
class render_type:
    """
    Members:
    
      render_all
    
      render_no_fixed
    
      render_fixed_only
    """
    __members__: typing.ClassVar[dict[str, render_type]]  # value = {'render_all': <render_type.render_all: 0>, 'render_no_fixed': <render_type.render_no_fixed: 1>, 'render_fixed_only': <render_type.render_fixed_only: 2>}
    render_all: typing.ClassVar[render_type]  # value = <render_type.render_all: 0>
    render_fixed_only: typing.ClassVar[render_type]  # value = <render_type.render_fixed_only: 2>
    render_no_fixed: typing.ClassVar[render_type]  # value = <render_type.render_no_fixed: 1>
    def __and__(self, other: typing.Any) -> typing.Any:
        ...
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __ge__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __gt__(self, other: typing.Any) -> bool:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __invert__(self) -> typing.Any:
        ...
    def __le__(self, other: typing.Any) -> bool:
        ...
    def __lt__(self, other: typing.Any) -> bool:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __or__(self, other: typing.Any) -> typing.Any:
        ...
    def __rand__(self, other: typing.Any) -> typing.Any:
        ...
    def __repr__(self) -> str:
        ...
    def __ror__(self, other: typing.Any) -> typing.Any:
        ...
    def __rxor__(self, other: typing.Any) -> typing.Any:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    def __xor__(self, other: typing.Any) -> typing.Any:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class size:
    @typing.overload
    def __init__(self) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: typing.SupportsInt, arg1: typing.SupportsInt) -> None:
        ...
    @property
    def height(self) -> int:
        ...
    @height.setter
    def height(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def width(self) -> int:
        ...
    @width.setter
    def width(self, arg0: typing.SupportsInt) -> None:
        ...
class style_display:
    """
    Members:
    
      display_none
    
      display_block
    
      display_inline
    
      display_inline_block
    
      display_inline_table
    
      display_list_item
    
      display_table
    
      display_table_caption
    
      display_table_cell
    
      display_table_column
    
      display_table_column_group
    
      display_table_footer_group
    
      display_table_header_group
    
      display_table_row
    
      display_table_row_group
    
      display_inline_text
    
      display_flex
    
      display_inline_flex
    """
    __members__: typing.ClassVar[dict[str, style_display]]  # value = {'display_none': <style_display.display_none: 0>, 'display_block': <style_display.display_block: 1>, 'display_inline': <style_display.display_inline: 2>, 'display_inline_block': <style_display.display_inline_block: 3>, 'display_inline_table': <style_display.display_inline_table: 4>, 'display_list_item': <style_display.display_list_item: 5>, 'display_table': <style_display.display_table: 6>, 'display_table_caption': <style_display.display_table_caption: 7>, 'display_table_cell': <style_display.display_table_cell: 8>, 'display_table_column': <style_display.display_table_column: 9>, 'display_table_column_group': <style_display.display_table_column_group: 10>, 'display_table_footer_group': <style_display.display_table_footer_group: 11>, 'display_table_header_group': <style_display.display_table_header_group: 12>, 'display_table_row': <style_display.display_table_row: 13>, 'display_table_row_group': <style_display.display_table_row_group: 14>, 'display_inline_text': <style_display.display_inline_text: 15>, 'display_flex': <style_display.display_flex: 16>, 'display_inline_flex': <style_display.display_inline_flex: 17>}
    display_block: typing.ClassVar[style_display]  # value = <style_display.display_block: 1>
    display_flex: typing.ClassVar[style_display]  # value = <style_display.display_flex: 16>
    display_inline: typing.ClassVar[style_display]  # value = <style_display.display_inline: 2>
    display_inline_block: typing.ClassVar[style_display]  # value = <style_display.display_inline_block: 3>
    display_inline_flex: typing.ClassVar[style_display]  # value = <style_display.display_inline_flex: 17>
    display_inline_table: typing.ClassVar[style_display]  # value = <style_display.display_inline_table: 4>
    display_inline_text: typing.ClassVar[style_display]  # value = <style_display.display_inline_text: 15>
    display_list_item: typing.ClassVar[style_display]  # value = <style_display.display_list_item: 5>
    display_none: typing.ClassVar[style_display]  # value = <style_display.display_none: 0>
    display_table: typing.ClassVar[style_display]  # value = <style_display.display_table: 6>
    display_table_caption: typing.ClassVar[style_display]  # value = <style_display.display_table_caption: 7>
    display_table_cell: typing.ClassVar[style_display]  # value = <style_display.display_table_cell: 8>
    display_table_column: typing.ClassVar[style_display]  # value = <style_display.display_table_column: 9>
    display_table_column_group: typing.ClassVar[style_display]  # value = <style_display.display_table_column_group: 10>
    display_table_footer_group: typing.ClassVar[style_display]  # value = <style_display.display_table_footer_group: 11>
    display_table_header_group: typing.ClassVar[style_display]  # value = <style_display.display_table_header_group: 12>
    display_table_row: typing.ClassVar[style_display]  # value = <style_display.display_table_row: 13>
    display_table_row_group: typing.ClassVar[style_display]  # value = <style_display.display_table_row_group: 14>
    def __and__(self, other: typing.Any) -> typing.Any:
        ...
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __ge__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __gt__(self, other: typing.Any) -> bool:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __invert__(self) -> typing.Any:
        ...
    def __le__(self, other: typing.Any) -> bool:
        ...
    def __lt__(self, other: typing.Any) -> bool:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __or__(self, other: typing.Any) -> typing.Any:
        ...
    def __rand__(self, other: typing.Any) -> typing.Any:
        ...
    def __repr__(self) -> str:
        ...
    def __ror__(self, other: typing.Any) -> typing.Any:
        ...
    def __rxor__(self, other: typing.Any) -> typing.Any:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    def __xor__(self, other: typing.Any) -> typing.Any:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class text_transform:
    """
    Members:
    
      text_transform_none
    
      text_transform_capitalize
    
      text_transform_uppercase
    
      text_transform_lowercase
    """
    __members__: typing.ClassVar[dict[str, text_transform]]  # value = {'text_transform_none': <text_transform.text_transform_none: 0>, 'text_transform_capitalize': <text_transform.text_transform_capitalize: 1>, 'text_transform_uppercase': <text_transform.text_transform_uppercase: 2>, 'text_transform_lowercase': <text_transform.text_transform_lowercase: 3>}
    text_transform_capitalize: typing.ClassVar[text_transform]  # value = <text_transform.text_transform_capitalize: 1>
    text_transform_lowercase: typing.ClassVar[text_transform]  # value = <text_transform.text_transform_lowercase: 3>
    text_transform_none: typing.ClassVar[text_transform]  # value = <text_transform.text_transform_none: 0>
    text_transform_uppercase: typing.ClassVar[text_transform]  # value = <text_transform.text_transform_uppercase: 2>
    def __and__(self, other: typing.Any) -> typing.Any:
        ...
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __ge__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __gt__(self, other: typing.Any) -> bool:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __invert__(self) -> typing.Any:
        ...
    def __le__(self, other: typing.Any) -> bool:
        ...
    def __lt__(self, other: typing.Any) -> bool:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __or__(self, other: typing.Any) -> typing.Any:
        ...
    def __rand__(self, other: typing.Any) -> typing.Any:
        ...
    def __repr__(self) -> str:
        ...
    def __ror__(self, other: typing.Any) -> typing.Any:
        ...
    def __rxor__(self, other: typing.Any) -> typing.Any:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    def __xor__(self, other: typing.Any) -> typing.Any:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class web_color:
    __hash__: typing.ClassVar[None] = None
    black: typing.ClassVar[web_color]  # value = <litehtmlpy.web_color object>
    current_color: typing.ClassVar[web_color]  # value = <litehtmlpy.web_color object>
    transparent: typing.ClassVar[web_color]  # value = <litehtmlpy.web_color object>
    white: typing.ClassVar[web_color]  # value = <litehtmlpy.web_color object>
    is_current_color: bool
    def __eq__(self, arg0: web_color) -> bool:
        ...
    @typing.overload
    def __init__(self) -> None:
        ...
    @typing.overload
    def __init__(self, r: typing.SupportsInt, g: typing.SupportsInt, b: typing.SupportsInt, a: typing.SupportsInt = 255) -> None:
        ...
    def __ne__(self, arg0: web_color) -> bool:
        ...
    def __str__(self) -> str:
        ...
    def darken(self, fraction: typing.SupportsFloat) -> web_color:
        ...
    @property
    def alpha(self) -> int:
        ...
    @alpha.setter
    def alpha(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def blue(self) -> int:
        ...
    @blue.setter
    def blue(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def green(self) -> int:
        ...
    @green.setter
    def green(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def red(self) -> int:
        ...
    @red.setter
    def red(self, arg0: typing.SupportsInt) -> None:
        ...
def debuglog(arg0: typing.SupportsInt) -> None:
    ...
def fromString(arg0: py_document_container, arg1: str, arg2: str, arg3: str) -> document:
    ...
background_attachment_fixed: background_attachment  # value = <background_attachment.background_attachment_fixed: 1>
background_attachment_scroll: background_attachment  # value = <background_attachment.background_attachment_scroll: 0>
background_repeat_no_repeat: background_repeat  # value = <background_repeat.background_repeat_no_repeat: 3>
background_repeat_repeat: background_repeat  # value = <background_repeat.background_repeat_repeat: 0>
background_repeat_repeat_x: background_repeat  # value = <background_repeat.background_repeat_repeat_x: 1>
background_repeat_repeat_y: background_repeat  # value = <background_repeat.background_repeat_repeat_y: 2>
display_block: style_display  # value = <style_display.display_block: 1>
display_flex: style_display  # value = <style_display.display_flex: 16>
display_inline: style_display  # value = <style_display.display_inline: 2>
display_inline_block: style_display  # value = <style_display.display_inline_block: 3>
display_inline_flex: style_display  # value = <style_display.display_inline_flex: 17>
display_inline_table: style_display  # value = <style_display.display_inline_table: 4>
display_inline_text: style_display  # value = <style_display.display_inline_text: 15>
display_list_item: style_display  # value = <style_display.display_list_item: 5>
display_none: style_display  # value = <style_display.display_none: 0>
display_table: style_display  # value = <style_display.display_table: 6>
display_table_caption: style_display  # value = <style_display.display_table_caption: 7>
display_table_cell: style_display  # value = <style_display.display_table_cell: 8>
display_table_column: style_display  # value = <style_display.display_table_column: 9>
display_table_column_group: style_display  # value = <style_display.display_table_column_group: 10>
display_table_footer_group: style_display  # value = <style_display.display_table_footer_group: 11>
display_table_header_group: style_display  # value = <style_display.display_table_header_group: 12>
display_table_row: style_display  # value = <style_display.display_table_row: 13>
display_table_row_group: style_display  # value = <style_display.display_table_row_group: 14>
draw_block: draw_flag  # value = <draw_flag.draw_block: 1>
draw_floats: draw_flag  # value = <draw_flag.draw_floats: 2>
draw_inlines: draw_flag  # value = <draw_flag.draw_inlines: 3>
draw_positioned: draw_flag  # value = <draw_flag.draw_positioned: 4>
draw_root: draw_flag  # value = <draw_flag.draw_root: 0>
font_size_large: font_size  # value = <font_size.font_size_large: 4>
font_size_larger: font_size  # value = <font_size.font_size_larger: 8>
font_size_medium: font_size  # value = <font_size.font_size_medium: 3>
font_size_small: font_size  # value = <font_size.font_size_small: 2>
font_size_smaller: font_size  # value = <font_size.font_size_smaller: 7>
font_size_x_large: font_size  # value = <font_size.font_size_x_large: 5>
font_size_x_small: font_size  # value = <font_size.font_size_x_small: 1>
font_size_xx_large: font_size  # value = <font_size.font_size_xx_large: 6>
font_size_xx_small: font_size  # value = <font_size.font_size_xx_small: 0>
font_style_italic: font_style  # value = <font_style.font_style_italic: 1>
font_style_normal: font_style  # value = <font_style.font_style_normal: 0>
font_variant_normal: font_variant  # value = <font_variant.font_variant_normal: 0>
font_variant_small_caps: font_variant  # value = <font_variant.font_variant_small_caps: 1>
font_weight_bold: font_weight  # value = <font_weight.font_weight_bold: 1>
font_weight_bolder: font_weight  # value = <font_weight.font_weight_bolder: 2>
font_weight_lighter: font_weight  # value = <font_weight.font_weight_lighter: 3>
font_weight_normal: font_weight  # value = <font_weight.font_weight_normal: 0>
line_height_normal: line_height  # value = <line_height.line_height_normal: 0>
list_style_type_armenian: list_style_type  # value = <list_style_type.list_style_type_armenian: 4>
list_style_type_circle: list_style_type  # value = <list_style_type.list_style_type_circle: 1>
list_style_type_cjk_ideographic: list_style_type  # value = <list_style_type.list_style_type_cjk_ideographic: 5>
list_style_type_decimal: list_style_type  # value = <list_style_type.list_style_type_decimal: 6>
list_style_type_decimal_leading_zero: list_style_type  # value = <list_style_type.list_style_type_decimal_leading_zero: 7>
list_style_type_disc: list_style_type  # value = <list_style_type.list_style_type_disc: 2>
list_style_type_georgian: list_style_type  # value = <list_style_type.list_style_type_georgian: 8>
list_style_type_hebrew: list_style_type  # value = <list_style_type.list_style_type_hebrew: 9>
list_style_type_hiragana: list_style_type  # value = <list_style_type.list_style_type_hiragana: 10>
list_style_type_hiragana_iroha: list_style_type  # value = <list_style_type.list_style_type_hiragana_iroha: 11>
list_style_type_katakana: list_style_type  # value = <list_style_type.list_style_type_katakana: 12>
list_style_type_katakana_iroha: list_style_type  # value = <list_style_type.list_style_type_katakana_iroha: 13>
list_style_type_lower_alpha: list_style_type  # value = <list_style_type.list_style_type_lower_alpha: 14>
list_style_type_lower_greek: list_style_type  # value = <list_style_type.list_style_type_lower_greek: 15>
list_style_type_lower_latin: list_style_type  # value = <list_style_type.list_style_type_lower_latin: 16>
list_style_type_lower_roman: list_style_type  # value = <list_style_type.list_style_type_lower_roman: 17>
list_style_type_none: list_style_type  # value = <list_style_type.list_style_type_none: 0>
list_style_type_square: list_style_type  # value = <list_style_type.list_style_type_square: 3>
list_style_type_upper_alpha: list_style_type  # value = <list_style_type.list_style_type_upper_alpha: 18>
list_style_type_upper_latin: list_style_type  # value = <list_style_type.list_style_type_upper_latin: 19>
list_style_type_upper_roman: list_style_type  # value = <list_style_type.list_style_type_upper_roman: 20>
render_all: render_type  # value = <render_type.render_all: 0>
render_fixed_only: render_type  # value = <render_type.render_fixed_only: 2>
render_no_fixed: render_type  # value = <render_type.render_no_fixed: 1>
text_transform_capitalize: text_transform  # value = <text_transform.text_transform_capitalize: 1>
text_transform_lowercase: text_transform  # value = <text_transform.text_transform_lowercase: 3>
text_transform_none: text_transform  # value = <text_transform.text_transform_none: 0>
text_transform_uppercase: text_transform  # value = <text_transform.text_transform_uppercase: 2>
